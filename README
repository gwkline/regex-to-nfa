This project uses Thompson's Construction to convert a regular expression into a special dictionary which represents a Non-Deterministic Finite Automata. We begin by processing the regex, adding an explicit character to denote the case of concatination, and then using the Shunting Yard algorithm to convert the regex from infix to postfix format. These two changes allow us to read the string linearly, and also allows us to handle order of precedence in our construction. We have a global variable representing the precedence of operators (Kleene star being the highest, then concatination, then union), and that is used in our Shunting Yard converter to eliminate the need for parenthesis.

This processed string is initialized at the beginning of our regex_to_nfa function, and then we begin stepping over each symbol. Each symbol that is seen by the script is made into an NFA. For non-operator characters (or the empty string), we create the basic two-state NFA and add it to a global stack. For operators, we pop NFAs off of the stack and then combine or transform them as necessary (using epsilon transitions to join NFAs when necessary), then that new transformed NFA is appended to the NFA stack. This allows us to build layers of NFAs without using recursion.

The function in_lang allows us to test if a regex would be accepted by an NFA or not. We step through the given string, and traverse the NFA using it's transition functions. If we see an available path based on the current character, we recursively go down that path, dropping the previously processed character. We also handle epsilon transitions using the same method, and instead of moving on to the next character we reprocess the same one, allowing us to handle any possible case. If the final state is reached and the string is empty, then 1 is returned, otherwise 0 is returned.
